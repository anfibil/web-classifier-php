Running on dev vs. prod modes:
----------------------------------------------------------------------
1) http://127.0.0.1:8000/app_dev.php/hello/Everaldo -> Opens the page in development mode.
2) http://127.0.0.1:8000/app.php/hello/Everaldo -> Opens the same page in production mode.
3) http://127.0.0.1:8000/hello/Reid -> Default is to open in development mode.


Symfony2 plugin for PhpStorm (really helpful!):
----------------------------------------------------------------------
http://goo.gl/KKdjSV
http://symfony2-plugin.espend.de/


For templating:
----------------------------------------------------------------------
Look at page 38 of the Symfony book "Optional Step 3: Create the Template".


To see changes on the production ("prod") environment:
----------------------------------------------------------------------
php app/console --env=prod cache:clear
php app/console cache clear (clears the dev env)


To create bundles using the Symfony console:
----------------------------------------------------------------------
php app/console generate:bundle -> Follow the instructions.


For the database, create a table named symfony (via SQL) and run:
----------------------------------------------------------------------
php app/console doctrine:schema:update --force

*Note that when extending forms, the database was not being updated with new fields,
which required removing the file src/ODE/UserBundle/Resources/config/doctrine/User.orm.yml


To run the app:
---------------
php app/console server:run


Cheat Sheet
------------
http://www.symfony2cheatsheet.com/


Doctrine data types for entity fields
-------------------------------------
http://doctrine-dbal.readthedocs.org/en/latest/reference/types.html




TODO: Error check profile picture upload feature.
TODO: Check why profile picture upload fails with large pictures (picEdit issue not uploading data)
TODO: When user is using webcam and clicks "Upload picture" before the check tick, page gets stuck. Fix that.
TODO: Compress and resize profile pictures before storing them

TODO: Setup for running experiments (as suggested by someone that actually knows what they are doing):
✓ 1) Create a page with a form to collects all experiment parameters. This page will send that information via POST to a "processing" page.
✓ 2) In the processing page, call exec(), add this experiment to an "Experiment table" in the database with a value of "False" in the "finished_running" column. Redirect user to a "waiting for results" page using header("location") and call exit.
✓ 3) In the waiting page, continuously check the database to see if the experiment finished running. While that is not true, keep refreshing the page or have one of those moving icon things displayed. The python script will update the database when it finishes running.
✓ 4) When the experiment is done, redirect user to the "results page". Create a template to display the results. This will accept an experiment_id, search for it in the database and display the results.

TODO: Improve (4) using ajax or something like that to avoid having to keep refreshing page
TODO: Once the above is working, improve (2) by directing the exec() call to a different script that forks the execution of multiple experiments to better handle concurrency. 
